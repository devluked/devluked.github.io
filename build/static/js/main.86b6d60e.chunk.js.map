{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["cities","name","population","lat","lng","Marker","this","props","height","markerStyles","styles","marker","width","borderRadius","style","className","React","Component","App","container","bootstrapURLKeys","key","defaultCenter","center","defaultZoom","zoom","map","city","defaultProps","display","flex","backgroundColor","cursor","borderWidth","borderColor","borderStyle","justifyContent","alignItems","fontWeight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qSAKMA,G,MAAS,CACb,CACEC,KAAM,SACNC,WAAY,OACZC,IAAK,UACLC,KAAM,SAER,CACEH,KAAM,SACNC,WAAY,OACZC,IAAK,UACLC,KAAM,WAsBJC,E,uKACM,IAAD,EACsBC,KAAKC,MAA1BN,EADD,EACCA,KAAMC,EADP,EACOA,WAGVM,EAAS,GACTN,EAAa,IACfM,GAAkB,IACTN,EAAa,IACtBM,GAAkB,KACTN,EAAa,OACtBM,GAAkB,MAGpB,IAAMC,EAAY,eACbC,EAAOC,OADM,CAEhBH,SACAI,MAAOJ,EACPK,aAAcL,EAAS,IAGzB,OACE,yBAAKM,MAAOL,EAAcM,UAAU,UACjCd,O,GAvBYe,IAAMC,WA6BrBC,E,uKAWF,OACE,yBAAKJ,MAAOJ,EAAOS,WAEjB,yBAAKL,MAAO,CAAEN,OAAQ,QAASI,MAAO,SACpC,kBAAC,IAAD,CACEQ,iBAAkB,CAAEC,IAAK,2CACzBC,cAAehB,KAAKC,MAAMgB,OAC1BC,YAAalB,KAAKC,MAAMkB,MAGtBzB,EAAO0B,KAAI,SAACC,GACV,OACE,kBAAC,EAAD,CACExB,IAAKwB,EAAKxB,IACVC,IAAKuB,EAAKvB,IACVF,WAAYyB,EAAKzB,WACjBD,KAAM0B,EAAK1B,iB,GA3Bbe,IAAMC,WAAlBC,EACGU,aAAe,CACpBL,OAAQ,CAENpB,IAAK,QACLC,IAAK,OAEPqB,KAAM,GAiCV,IAAMf,EAAS,CACbS,UAAW,CACTU,QAAS,OACTC,KAAM,GAERnB,OAAQ,CACNoB,gBAAiB,SACjBvB,OAAQ,GACRI,MAAO,GACPC,aAAc,GACdmB,OAAQ,UACRC,YAAa,EACbC,YAAa,QACbC,YAAa,QACbN,QAAS,OACTO,eAAgB,SAChBC,WAAY,SACZC,WAAY,SAIDpB,ICpHKqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.86b6d60e.chunk.js","sourcesContent":["import React from 'react';\nimport GoogleMapReact from 'google-map-react';\n\nimport './App.css';\n\nconst cities = [\n  {\n    name: 'London',\n    population: 8982000, // 8.982 m\n    lat: 51.509865,\n    lng: -0.118092\n  },\n  {\n    name: 'Madrid',\n    population: 6642000, // 6.642\n    lat: 40.416775,\n    lng: -3.703790\n  },\n  // {\n  //   name: 'Berlin',\n  //   population: 0,\n  //   lat: 0,\n  //   lng: 0\n  // },\n  // {\n  //   name: 'Rome',\n  //   population: 0,\n  //   lat: 0,\n  //   lng: 0\n  // },\n  // {\n  //   name: 'Paris',\n  //   population: 0,\n  //   lat: 0,\n  //   lng: 0\n  // }\n]\n\nclass Marker extends React.Component {\n  render() {\n    const { name, population } = this.props;\n\n    // TODO: clean this up, make helper\n    let height = 20;\n    if (population > 8000000) {\n      height = height * 2.5;\n    } else if (population > 5000000) {\n      height = height * 1.75;\n    } else if (population > 2500000) {\n      height = height * 1.25;\n    }\n\n    const markerStyles = {\n      ...styles.marker,\n      height,\n      width: height,\n      borderRadius: height / 2\n    }\n\n    return (\n      <div style={markerStyles} className='marker'>\n        {name}\n      </div>\n    )\n  }\n}\n\nclass App extends React.Component {\n  static defaultProps = {\n    center: {\n      // kind off center of western europe\n      lat: 46.2022,\n      lng: 1.264\n    },\n    zoom: 5\n  };\n\n  render() {\n    return (\n      <div style={styles.container}>\n\n        <div style={{ height: '100vh', width: '100%' }}>\n          <GoogleMapReact\n            bootstrapURLKeys={{ key: 'AIzaSyAZk1OQVp3sApAt7PHetwWPGMrqrgnx2Bk' }}\n            defaultCenter={this.props.center}\n            defaultZoom={this.props.zoom}\n          >\n            {\n              cities.map((city) => {\n                return (\n                  <Marker \n                    lat={city.lat}\n                    lng={city.lng}\n                    population={city.population}\n                    name={city.name}\n                  />\n                )\n              })\n            }\n          </GoogleMapReact>\n        </div>\n\n      </div>\n    );\n  }\n}\n\nconst styles = {\n  container: {\n    display: 'flex',\n    flex: 1\n  },\n  marker: {\n    backgroundColor: 'yellow',\n    height: 20,\n    width: 20,\n    borderRadius: 10,\n    cursor: 'pointer',\n    borderWidth: 2,\n    borderColor: 'white',\n    borderStyle: 'solid',\n    display: 'flex',\n    justifyContent: 'center',\n    alignItems: 'center',\n    fontWeight: 'bold'\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}