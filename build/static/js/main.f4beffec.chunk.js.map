{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["cities","name","population","lat","lng","Marker","this","props","height","markerStyles","styles","marker","width","borderRadius","style","className","React","Component","App","container","bootstrapURLKeys","key","defaultCenter","center","defaultZoom","zoom","map","city","defaultProps","display","flex","backgroundColor","cursor","borderWidth","borderColor","borderStyle","justifyContent","alignItems","fontWeight","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qSAKMA,G,MAAS,CACb,CACEC,KAAM,SACNC,WAAY,OACZC,IAAK,UACLC,KAAM,SAER,CACEH,KAAM,SACNC,WAAY,OACZC,IAAK,UACLC,KAAM,WAsBJC,E,uKACM,IAAD,EACsBC,KAAKC,MAA1BN,EADD,EACCA,KAAMC,EADP,EACOA,WAGVM,EAAS,GACTN,EAAa,IACfM,GAAkB,IACTN,EAAa,IACtBM,GAAkB,KACTN,EAAa,OACtBM,GAAkB,MAGpB,IAAMC,EAAY,eACbC,EAAOC,OADM,CAEhBH,SACAI,MAAOJ,EACPK,aAAcL,EAAS,IAGzB,OACE,yBAAKM,MAAOL,EAAcM,UAAU,UACjCd,O,GAvBYe,IAAMC,WA6BrBC,E,uKAWF,OACE,yBAAKJ,MAAOJ,EAAOS,WAEjB,yBAAKL,MAAO,CAAEN,OAAQ,QAASI,MAAO,SACpC,kBAAC,IAAD,CACEQ,iBAAkB,CAAEC,IAAK,2CACzBC,cAAehB,KAAKC,MAAMgB,OAC1BC,YAAalB,KAAKC,MAAMkB,MAGtBzB,EAAO0B,KAAI,SAACC,GACV,OACE,kBAAC,EAAD,CACExB,IAAKwB,EAAKxB,IACVC,IAAKuB,EAAKvB,IACVF,WAAYyB,EAAKzB,WACjBD,KAAM0B,EAAK1B,iB,GA3Bbe,IAAMC,WAAlBC,EACGU,aAAe,CACpBL,OAAQ,CAENpB,IAAK,QACLC,IAAK,OAEPqB,KAAM,GAiCV,IAAMf,EAAS,CACbS,UAAW,CACTU,QAAS,OACTC,KAAM,GAERnB,OAAQ,CACNoB,gBAAiB,SACjBvB,OAAQ,GACRI,MAAO,GACPC,aAAc,GACdmB,OAAQ,UACRC,YAAa,EACbC,YAAa,QACbC,YAAa,QACbN,QAAS,OACTO,eAAgB,SAChBC,WAAY,SACZC,WAAY,SAIDpB,ICpHKqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.f4beffec.chunk.js","sourcesContent":["import React from 'react';\r\nimport GoogleMapReact from 'google-map-react';\r\n\r\nimport './App.css';\r\n\r\nconst cities = [\r\n  {\r\n    name: 'London',\r\n    population: 8982000, // 8.982 m\r\n    lat: 51.509865,\r\n    lng: -0.118092\r\n  },\r\n  {\r\n    name: 'Madrid',\r\n    population: 6642000, // 6.642\r\n    lat: 40.416775,\r\n    lng: -3.703790\r\n  },\r\n  // {\r\n  //   name: 'Berlin',\r\n  //   population: 0,\r\n  //   lat: 0,\r\n  //   lng: 0\r\n  // },\r\n  // {\r\n  //   name: 'Rome',\r\n  //   population: 0,\r\n  //   lat: 0,\r\n  //   lng: 0\r\n  // },\r\n  // {\r\n  //   name: 'Paris',\r\n  //   population: 0,\r\n  //   lat: 0,\r\n  //   lng: 0\r\n  // }\r\n]\r\n\r\nclass Marker extends React.Component {\r\n  render() {\r\n    const { name, population } = this.props;\r\n\r\n    // TODO: clean this up, make helper\r\n    let height = 20;\r\n    if (population > 8000000) {\r\n      height = height * 2.5;\r\n    } else if (population > 5000000) {\r\n      height = height * 1.75;\r\n    } else if (population > 2500000) {\r\n      height = height * 1.25;\r\n    }\r\n\r\n    const markerStyles = {\r\n      ...styles.marker,\r\n      height,\r\n      width: height,\r\n      borderRadius: height / 2\r\n    }\r\n\r\n    return (\r\n      <div style={markerStyles} className='marker'>\r\n        {name}\r\n      </div>\r\n    )\r\n  }\r\n}\r\n\r\nclass App extends React.Component {\r\n  static defaultProps = {\r\n    center: {\r\n      // kind off center of western europe\r\n      lat: 46.2022,\r\n      lng: 1.264\r\n    },\r\n    zoom: 5\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div style={styles.container}>\r\n\r\n        <div style={{ height: '100vh', width: '100%' }}>\r\n          <GoogleMapReact\r\n            bootstrapURLKeys={{ key: 'AIzaSyAZk1OQVp3sApAt7PHetwWPGMrqrgnx2Bk' }}\r\n            defaultCenter={this.props.center}\r\n            defaultZoom={this.props.zoom}\r\n          >\r\n            {\r\n              cities.map((city) => {\r\n                return (\r\n                  <Marker \r\n                    lat={city.lat}\r\n                    lng={city.lng}\r\n                    population={city.population}\r\n                    name={city.name}\r\n                  />\r\n                )\r\n              })\r\n            }\r\n          </GoogleMapReact>\r\n        </div>\r\n\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst styles = {\r\n  container: {\r\n    display: 'flex',\r\n    flex: 1\r\n  },\r\n  marker: {\r\n    backgroundColor: 'yellow',\r\n    height: 20,\r\n    width: 20,\r\n    borderRadius: 10,\r\n    cursor: 'pointer',\r\n    borderWidth: 2,\r\n    borderColor: 'white',\r\n    borderStyle: 'solid',\r\n    display: 'flex',\r\n    justifyContent: 'center',\r\n    alignItems: 'center',\r\n    fontWeight: 'bold'\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}